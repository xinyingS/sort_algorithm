Quick Sort

quick sort = pivot
是一种先整体有序，再局部有序的sort.
主要有两个步骤：
（1）Partition
（2）Quick Sort

......| pivot | .....
 <= p            >=p

 虽然左边部分是比pivot小的，右边比pivot大的；
 但实际我们找的是左边大于pivot的值(left大于pivot)，与右边小于pivot的值(右边小于pivot)swap.


time: average O(nlogn)

public class QuickSort {
	public void qs(int[] nums) {
		quickSort(nums, 0, nums.length - 1);
	}

  //(1) Partition && (2) Quick Sort
	private void quickSort(int[] nums, int start, int end){
		if(start >= end){
			return;
		}
		//1.pivot is a value instead of an index
		int pivot = nums[(start + end) / 2];
		int left = start;
		int right = end;

		//2. left <= right.
		while(left <= right){
			while(left <= right && nums[left] < pivot){ // 3. find left > p
				left ++;
			}
			while(left <= right && nums[right] > pivot){ // 4. find right < p
				right --;
			}

			if(left <= right){
				int temp = nums[left];
				nums[left] = nums[right];
				nums[right] = temp;
				left ++;
				right --;
			}
		}

    //Quick Sort
		quickSort(nums, start, right);
		quickSort(nums, left, end);
	}

	public void printArray(int[] nums) {
		for (int i = 0; i < nums.length; i++) {
			System.out.println(nums[i] + " ");
		}
		System.out.println();
	}

}
