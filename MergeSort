Merge Sort

reference from : https://www.youtube.com/watch?v=JSceec-wEyw
                 https://www.geeksforgeeks.org/merge-sort/

MergeSort is a Divide and Conquer algorithm(Quick sort also D&C). It divides input array in two halves,
call itself for dividing the two halves, and then merges the two sorted halves.

Two functions:
(1) mergeSort() -> Recursively calls itself to divide the array till size becomes one.
(2) merge() -> Used for merging two halves.

(先局部有序再整体有序) -> cut from the middle and repeat it recursively.

time: O(nlogn)
space: O(n) extra space -> It means we need another temp array.



public class MergeSort {
	public void ms(int[] A) {
		int[] temp = new int[A.length];
        mergeSort(A, 0, A.length - 1, temp);
	}

	private void mergeSort(int[] A, int start, int end, int[] temp) {
        if (start >= end) {
            return;
        }

        int mid = (start + end) / 2;

        mergeSort(A, start, mid, temp);
        mergeSort(A, mid+1, end, temp);
        merge(A, start, mid, end, temp);
    }

    private void merge(int[] A, int start, int mid, int end, int[] temp) {
        int left = start;
        int right = mid+1;
        int index = start;

        while (left <= mid && right <= end) {
            if (A[left] < A[right]) {
                temp[index++] = A[left++];
            } else {
                temp[index++] = A[right++];
            }
        }
        while (left <= mid) {
            temp[index++] = A[left++];
        }
        while (right <= end) {
            temp[index++] = A[right++];
        }

        for (index = start; index <= end; index++) {
            A[index] = temp[index];
        }
    }

	public void printArray(int[] nums) {
		for (int i = 0; i < nums.length; i++) {
			System.out.println(nums[i] + " ");
		}
		System.out.println();
	}
}
